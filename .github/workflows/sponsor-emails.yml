# .github/workflows/test-sponsor-emails.yml
name: Test Sponsor Emails (Sem1 Only)

on:
  workflow_dispatch: # Only manual triggering
    inputs:
      dry_run:
        description: 'dry run'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  test-emails:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Debug environment variables
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          CRON_SECRET: ${{ secrets.CRON_SECRET }}
        run: |
          echo "üîç Debugging environment..."
          echo "BASE_URL is set: $([ -n "$BASE_URL" ] && echo "YES" || echo "NO")"
          echo "CRON_SECRET is set: $([ -n "$CRON_SECRET" ] && echo "YES" || echo "NO")"
          if [ -n "$BASE_URL" ]; then
            echo "BASE_URL value: $BASE_URL"
          else
            echo "‚ùå BASE_URL is not set!"
            exit 1
          fi
          
      - name: Test semester 1 email sending
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          CRON_SECRET: ${{ secrets.CRON_SECRET }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        run: |
          echo "üß™ Testing semester 1 email workflow..."
          echo "Dry run mode: $DRY_RUN"
          
          # Validate environment variables
          if [ -z "$BASE_URL" ]; then
            echo "‚ùå BASE_URL environment variable is not set"
            exit 1
          fi
          
          if [ -z "$CRON_SECRET" ]; then
            echo "‚ùå CRON_SECRET environment variable is not set"
            exit 1
          fi
          
          # Clean up BASE_URL (remove trailing slash if present)
          BASE_URL_CLEAN=$(echo "$BASE_URL" | sed 's/\/$//g')
          ENDPOINT="${BASE_URL_CLEAN}/api/cron-trigger-sem1"
          echo "üéØ Target endpoint: $ENDPOINT"
          
          if [ "$DRY_RUN" == "true" ]; then
            echo "üîç DRY RUN: Would call $ENDPOINT"
            echo "‚úÖ Dry run completed - no emails sent"
            exit 0
          fi
          
          echo "üìß Sending actual emails..."
          
          # More verbose curl with better error handling and follow redirects
          response=$(curl -L -v -s -w "\n%{http_code}" \
            -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CRON_SECRET" \
            "$ENDPOINT" 2>&1)
          
          curl_exit_code=$?
          
          if [ $curl_exit_code -ne 0 ]; then
            echo "‚ùå Curl failed with exit code: $curl_exit_code"
            echo "Response: $response"
            exit 1
          fi
          
          # Extract HTTP code and body
          http_code=$(echo "$response" | grep -o '[0-9]\{3\} | tail -1)
          body=$(echo "$response" | sed '$d')
          
          echo "HTTP Status: $http_code"
          echo "Response Body: $body"
          
          if [ "$http_code" != "200" ]; then
            echo "‚ùå Failed to send emails (HTTP $http_code)"
            exit 1
          else
            echo "‚úÖ Emails sent successfully"
          fi